{"version":3,"sources":["index.js"],"names":["socket","io","video","document","getElementById","playButton","createRoomButton","joinRoomInput","joinRoomButton","roomStatusUpdates","canvas","ctx","getContext","selfImageCanvas","opponentImageCanvas","selfImgCtx","font","opponentImgCtx","selfImg","Image","oppImg","updateRoomStatus","text","li","createElement","textContent","appendChild","drawImg","width","videoWidth","height","videoHeight","drawImage","rect","lineWidth","strokeStyle","stroke","setTimeout","on","console","log","id","response","result","score","Number","innerHTML","updateScore","k","onload","src","drawRoundResults","navigator","mediaDevices","getUserMedia","then","stream","srcObject","catch","error","onplay","onclick","a","emit","roomID","value","toUpperCase","tempCanvas","temp_ctx","img","toDataURL"],"mappings":"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","file":"static/js/main.34e77bb9.chunk.js","sourcesContent":["import './index.css';\nimport io from 'socket.io-client';\n\n// Connecting to multiplayer server\n\n// LOCAL TESTING\n// var socket = io(\"http://127.0.0.1:8000/\");\n\n// REMOTE SERVER\nvar socket = io(\"https://rock-paper-scissors-ar.herokuapp.com/\");\n\n// Initialize doc elements\nvar video = document.getElementById(\"videoElement\");\nvar playButton = document.getElementById(\"playButton\");\nvar createRoomButton = document.getElementById(\"createRoomButton\");\nvar joinRoomInput = document.getElementById(\"joinRoomInput\");\nvar joinRoomButton = document.getElementById(\"joinRoomButton\");\nvar roomStatusUpdates = document.getElementById(\"roomStatusUpdates\");\nvar canvas = document.getElementById(\"videoCanvas\");\nvar ctx = canvas.getContext('2d');\nvar selfImageCanvas = document.getElementById('handImageSelf');\nvar opponentImageCanvas = document.getElementById('handImageOpponent');\nvar selfImgCtx = selfImageCanvas.getContext('2d');\nselfImgCtx.font = \"240px Arial\";\nvar opponentImgCtx = opponentImageCanvas.getContext('2d');\nopponentImgCtx.font = \"240px Arial\";\nvar selfImg = new Image();\nvar oppImg = new Image();\n\n\n// SOCKET IO CHANNELS\nsocket.on('connect', function() {\n    console.log('Successfully connected to server! SID:', socket.id);\n});\n\nsocket.on('room_status', (response) => {\n    console.log(response);\n    updateRoomStatus(response['status'])\n})\n\nsocket.on('score', (response) => {\n    var result = response[socket.id]['result'];\n    updateScore(result);\n    drawRoundResults(response);\n})\n\n\nif (navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then(function (stream) {\n        video.srcObject = stream;\n      })\n      .catch(function (error) {\n        console.log(\"Something went wrong!\");\n      });\n}\n\n\nfunction updateScore(result) {\n    var score = Number(document.getElementById(result).innerHTML);\n    document.getElementById(result).innerHTML = ++score;\n\n    if (result === \"win\") {\n        updateRoomStatus(\"You won!\")\n    } else if (result === \"loss\") {\n        updateRoomStatus(\"You lost.\")\n    } else {\n        updateRoomStatus(\"Tie!\")\n    }\n}\n\n\n// DISPLAY ROOM STATUS UPDATES \nfunction updateRoomStatus(text) {\n    let li = document.createElement(\"li\");\n    li.textContent = text;\n    roomStatusUpdates.appendChild(li);\n}\n\n\nvideo.onplay = function() {\n    setTimeout(drawImg , 300);\n};\n\n\nfunction drawImg(){\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    // Rectangle: (X, Y, Width, Height);\n    ctx.rect(20,80,200,200);\n    ctx.lineWidth = \"6\";\n    ctx.strokeStyle = \"darkRed\";    \n    ctx.stroke();\n\n    setTimeout(drawImg , 100);\n}\n\n\ncreateRoomButton.onclick = async function() {\n    socket.emit('create_room');\n}\n\n\njoinRoomButton.onclick = async function() {\n    var roomID = joinRoomInput.value.toUpperCase();\n    socket.emit('join_room', {'room': roomID});\n}\n\n\nplayButton.onclick = async function() {\n    var tempCanvas = document.getElementById('tempCanvas');\n    var temp_ctx = tempCanvas.getContext('2d');\n    tempCanvas.width = 196;\n    tempCanvas.height = 196;\n    temp_ctx.drawImage(canvas, 23, 83, 193, 193, 0, 0, 196, 196);\n    var img = tempCanvas.toDataURL(\"image/jpeg\", 1.0);\n\n    socket.emit('play', {'imageURL': img});\n}\n\n\nfunction drawRoundResults(result) {\n    for (var k in result) {\n        console.log(result[k]['hand']);\n        if (k === socket.id) {\n            // eslint-disable-next-line\n            selfImg.onload = function() {\n                selfImageCanvas.width = 170;\n                selfImageCanvas.height = 170;\n                selfImgCtx.drawImage(selfImg, 0, 0, 170, 170);\n            }\n            selfImg.src = result[k]['img'];\n        }\n        else {\n            // eslint-disable-next-line\n            oppImg.onload = function() {\n                opponentImageCanvas.width = 170;\n                opponentImageCanvas.height = 170;\n                opponentImgCtx.drawImage(oppImg, 0, 0, 170, 170);\n            }\n            oppImg.src = result[k]['img'];\n        }\n\n    }\n}\n"],"sourceRoot":""}